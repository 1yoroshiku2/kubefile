#生产nginx建议配置
#user  XXXXX;

#auto的意思是根据可用的CPU核数自动设置工作进程的数量。
worker_processes  auto;
#auto表示Nginx会自动将工作进程绑定到可用的CPU核心上，以充分利用系统的多核处理能力。
worker_cpu_affinity  auto;
#设置了每个工作进程能够打开的最大文件描述符数量。提高并发处理请求能力
worker_rlimit_nofile  65535;

#notice: 提示性消息，表明正常但重要的事件
error_log  /app/nginx/logs/error.log notice;

#用于存储Nginx主进程的PID，以便其他进程或管理工具可以通过读取该文件来获取主进程的PID，并与之进行通信和控制。
pid        /app/nginx/logs/nginx.pid;

#用于配置Nginx的事件模型和相关参数。
events {
    #epoll是一种在Linux系统上高效处理大量并发连接的事件驱动机制。
    use    epoll;
    #设置每个工作进程能够同时处理的最大连接数。一般建议为操作系统最大文件描述符的一半。
    worker_connections  65535;
}


http {    
#比如：当我们打开'chrome浏览器'看一个'PNG格式的图片'的时候,Nginx是这样'发送格式信息'的： 
#1）服务器上'有wzj.png'这个文件，后缀名是png; 
#2）根据'include mime.types'查找到这个文件的'数据类型'应该是'image/png'; 
#3）将'Content-Type'的值设置为'image/png',然后发送给'客户端(浏览器)'
    include       mime.types;
    default_type  application/octet-stream;
    
    map $time_iso8601 $logdate {
        '~^(?<ymd>\d{4}-\d{2}-\d{2})' $ymd;
        default    'date-not-found';
    }


    log_format access
        '{"version": "2", '
        '"time": "$time_iso8601", '
        '"remote_addr": "$remote_addr", '
        '"status": "$status", '
        '"request_uri": "$request_uri", '
        '"request_time": "$request_time", '
        '"response_time": "$upstream_response_time"}';

    access_log  /app/nginx/logs/access-$logdate.log  access;

    log_not_found    off;
    server_tokens    off;
    sendfile        on;
    tcp_nopush     on;
    tcp_nodelay    on;
    #proxy_ignore_client_abort on;

    client_body_timeout  30;
    client_body_buffer_size 800k;
    client_max_body_size 50m;
    keepalive_timeout  60;
    keepalive_requests  1000;
	
    proxy_set_header   X-Real-IP        $remote_addr;
	proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
	proxy_buffer_size 1024k;
	proxy_buffers 16 1024k;
	proxy_busy_buffers_size 2048k;
	proxy_temp_file_write_size 2048k;

    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 64k;
    gzip_comp_level 6;
    gzip_proxied any;
    gzip_disable "MSIE [1-6]\.";
    gzip_types text/plain application/javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png application/pdf;
    gzip_vary on;

	
    # 80端口转443
    server {
        listen 80;
        server_name xxxxx.com www.xxxxx.com;
        rewrite ^(.*)$ https://${server_name}$1 permanent; 
    }

    server {
        listen 			443 ssl;
        server_name		xxxxx.com www.xxxxx.com;
        ssl_certificate		/app/nginx/conf/ssl/xxxxx.com.pem;
        ssl_certificate_key     /app/nginx/conf/ssl/xxxxx.com.key;
        ssl_session_timeout     5m;
        ssl_protocols   TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers     ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
        ssl_prefer_server_ciphers       on;
        
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Credentials true;
        add_header Access-Control-Allow-Methods 'POST,GET,OPTIONS,PUT,DELETE';
        add_header Access-Control-Allow-Headers 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Mx-ReqToken,X-Requested-With,Pragma,Date,x-timestamp';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header Content-Security-Policy "default-src 'self';";
        add_header X-Frame-Options "SAMEORIGIN";
        add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
        add_header Access-Control-Expose-Headers 'WWW-Authenticate,Server-Authorization';
        add_header P3P 'policyref="/w3c/p3p.xml", CP="NOI DSP PSAa OUR BUS IND ONL UNI COM NAV INT LOC"';
            
        if ($request_method = 'OPTIONS') {
		    return 204;
        }


        # 通用接口
        location ^~ /xxxx/api {
            proxy_pass    http://127.0.0.1:8080;
        }

        location / {
            root /app/xxxxx/view/;
            index  index.html index.htm;
            #映射到index.html上
            try_files $uri $uri/ /index.html;
        }
    }

}
